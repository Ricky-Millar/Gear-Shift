
int  incomingByte;
int neutral;
int n;
unsigned char i;
int upstate = 0;
int downstate = 0;
const int down = 2;
const int up = 3;
int gear = 0;
int led = 13;
int bananas = 0;
int G0 = 188;
int G1 =  0;
int G2 = 375;
int G3 = 750;
int G4 = 1125;
int G5 = 1500;
int G6 = 1875;
int Neutralstate;
const int StepPerShift = 1800/6;

const int buttonPin = 2;    // the number of the pushbutton pin
const int ledPin = 13;      // the number of the LED pin

// Variables will change:
int ledState = LOW;         // the current state of the output pin
int buttonState;             // the current reading from the input pin
int lastButtonState = LOW;   // the previous reading from the input pin

// the following variables are unsigned long's because the time, measured in miliseconds,
// will quickly become a bigger number than can be stored in an int.
unsigned long lastDebounceTime = 0;  // the last time the output pin was toggled
unsigned long debounceDelay = 50;    // the debounce time; increase if the output flickers

void setup() {

  Serial.begin(9600);    //Initiate serial port
  delay(3000);
pinMode(down, INPUT_PULLUP);
pinMode(up, INPUT_PULLUP); //Wait for motor to finish initiation routine - If you give commands to motor on power on it may behave irratically
pinMode(buttonPin, INPUT_PULLUP);
  
  Serial.println("X");    //Auto Calibration command, Required only once when using motor for the first time, after running onces parameters are stored in motor controller.
  delay(5000);            //Wait for 5 Seconds for calibration
  
 // Serial.println("E125");    //Set I2C slave address for motor. If more than one motor is to be controlled on I2C bus every motor needs different address which can be set using this command. 
                             //Required only once when using motor for the first time, after running onces parameters are stored in motor controller.
 // delay(500);                //Allow to store setting
  Serial.println("M255");  //Set maximum speed of motor, useful when using G command for going to specific encoder position.
  delay(500);              //Allow to store setting
  Serial.println("D255");  //Set damping - acceleration and decceleration
  delay(500);              //Allow to store setting
}



void loop() {

switch(Neutralstate){
  case 0: 
if(digitalRead(9))
  {n++; if(n>50){n=51; Neutralstate = 1;neutral=1;}}break;

  case 1: if(!digitalRead(9))
{n=0; neutral = 0;Neutralstate = 0;}
}

upstate = digitalRead(up);
downstate = digitalRead(down);

  switch(gear)
  {
    //Neutral
    case 0:
    if (bananas ==0) {
    // Serial.print("P");
    // Serial.println(G0);    //Set current encoder position as 0
    }bananas =1;

   if (digitalRead(up) == LOW) {
   gear = 11;  Serial.print("G");Serial.println(-G1);
  delay(200);upstate = 0; bananas = 0;
  
   } break;
//First
   case 1: 
   if (digitalRead(up) == LOW) {
   gear = 12;  Serial.print("G");Serial.println(-G2);
     delay(200);break;
   }
   else if (digitalRead(down) == LOW) {
   gear = 10;  Serial.print("G");Serial.println(-G0);

     delay(200);
   }break;
//Second
      case 2: 
   if (digitalRead(up) == LOW) {
   gear = 13;  Serial.print("G");Serial.println(-G3);
     delay(200);break;
   }
   else if (digitalRead(down) == LOW) {
   gear = 11;  Serial.print("G");Serial.println(G1);
        delay(200);
   }break;
//Third
      case 3:  
   if (digitalRead(up) == LOW) {
   gear = 14;  Serial.print("G");Serial.println(-G4);
     delay(200);break;
   }
   else if (digitalRead(down) == LOW) {
   gear = 12;  Serial.print("G");Serial.println(-G2);
   
     delay(200);
   }break;
//Fourth
      case 4: 
   if (digitalRead(up) == LOW) {
   gear = 15;  Serial.print("G");Serial.println(-G5);
     delay(200); break;
   }
   else if (digitalRead(down) == LOW) {
   gear = 13;  Serial.print("G");Serial.println(-G3);
     delay(200);
   }break;
//Fith
      case 5: 
   if (digitalRead(up) == LOW) {
   gear = 16;  Serial.print("G");Serial.println(-G6);
     delay(200);break;
   }
   else if (digitalRead(down) == LOW) {
   gear = 14;  Serial.print("G");Serial.println(-G4);
     delay(200);
   }break;
//sixth
      case 6: 
   if (digitalRead(down) == LOW) {
   gear = 15;  Serial.print("G");Serial.println(-G5);
     delay(200);
   }break;
   
          case 10: 
  gear = 0;  //WRITE TO MEMORY
     break;
          case 11: 
  gear = 1; //WRITE TO MEMORY
     break;
          case 12: 
  gear = 2;  //WRITE TO MEMORY
     break;
          case 13: 
  gear = 3;  //WRITE TO MEMORY
     break;
          case 14: 
  gear = 4;  //WRITE TO MEMORY
     break;
          case 15: 
  gear = 5;  //WRITE TO MEMORY
     break;
          case 16: 
  gear = 6; //WRITE TO MEMORY
     break;
}}
