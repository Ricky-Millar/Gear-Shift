
//Include nescisery libraries
#include <PulseClearpath.h>  
#include <EEPROM.h>
#include <Arduino.h>
#include <StepController.h>
#include <StepClearpath.h>

//define time keeping vriables
unsigned long ShiftTime;
unsigned long OldTime;
int n;
int count = 0;
int count2 = 0;

//define input pins
const int down = 2;
const int up = 3;
const int NeutralIndicator = 11;
const int EmerencyHome = 13;
const int NeutralButton = 12;

//Define position recovery variables
int Nshiftdirection;
int shiftdirection; // 0 = Failedshift  1 = fullshift up    2 = fullshift down    3 = halfshift up    4 = halfshift down

//Read and set gear state from memory
int gear =  EEPROM.read(1);
//Define shift distances
float stepsperrev = float(6400*(4/3)); //steps for motor to revolve multiplied by gear ratio between motor and gear selector
double FullShift=(stepsperrev/6); // 6 gears in a rotation
double HalfShift=FullShift/2;

// initialize a StepClearpath Motor
StepClearpath X; 
//initialize the controller and pass the reference to the motor
StepController machine(&X); 


void setup() 
{
  //Initiate serial port, for DEBUG only
    Serial.begin(9600);

  //Set ClearPath Motot Paramiters
    X.attach(8,9,6,4);      //Direction/A = 8, Step/B = 9, Enable = 6, HLFB = 4  
    X.setMaxVel(95000);   //Parameter can be between 2 and 100,000
    X.setMaxAccel(2000000); //Parameter can be between 4000 and 2,000,000
    machine.Start(249);     //Set up the ISR to constantly check motor position. MUST BE SET TO 249

  //Initiate inputs
    pinMode(down, INPUT_PULLUP);
    pinMode(up, INPUT_PULLUP);
    pinMode(NeutralIndicator, INPUT_PULLUP);
    pinMode(NeutralButton, INPUT_PULLUP); 
    pinMode(EmerencyHome, INPUT_PULLUP);
    delay(50);
}

 
//Subroutine for checking if a shift was sucsesful
void ShiftCheck()
{
 delay(30);
  //HLFB is high, the motor is not where it is comanded to be,
  while(X.readHLFB()){ 
   //Incriment counter
   count++;Serial.println(count);Serial.print('.');
   //Detect jam after set time
    if(count >= 70){
        gear = EEPROM.read(1); //reset gear state to previous gear
        Serial.println();Serial.println("Falied Shift - attempting to revert");
        //Revert to previous state dependant on last move taken (shift direction)
        if(shiftdirection == 1){X.move(-FullShift);}
        if(shiftdirection == 2){X.move(FullShift);}
        if(shiftdirection == 3){X.move(-HalfShift);}
        if(shiftdirection == 4){X.move(HalfShift);}
        //Reset sifting paramiters and counter, disable motor
        shiftdirection = 0;
        count = 0;X.disable();
        delay(200);return;
        }  
    }
 //Sucsessful shift printing and motor disable
 Serial.println();Serial.print("Succsessful shift, taking - ");Serial.print(millis()-OldTime);Serial.println("ms ish");delay(200);X.disable(); count = 0; 
 return;
}

//Subroutine for checking if neutralbutton shift was sucsesful
bool NShiftCheck(){
 delay(30);
  while(X.readHLFB()){ 
   count2++;Serial.println(count2);
   Serial.print('.');
    if(count2 >= 150){count2=0;
       return false;
        }  
    }Serial.println();
  Serial.print("Succsessful Neutral");X.disable();delay(200); count2 = 0; return true;
}

void loop() {
 
//Check If neutral button has been pressed for a time
/*
    if (digitalRead(9)==1)
    {n++; if (n > 5000) {n = 0; neutral = 1;Serial.println("NOT IT NEUTRAL");}} 
 
   if (digitalRead(9)==0)
    {n++; if (n > 5000) {n = 0; neutral = 0;Serial.println("IN NEUTRAL");}} 
*/


  //Gear Finite State Machine
    switch (gear){ 
    case 0://Neutral 
        if (digitalRead(up) == LOW) {X.enable(); gear = 11;  X.move(-HalfShift); shiftdirection =4;  OldTime = millis();}
            
         break;
    case 1://First
        if (digitalRead(up) == LOW) {X.enable(); gear = 12;  X.move(FullShift); shiftdirection =1;  OldTime = millis();
          break;
        }
        else if (digitalRead(down) == LOW) {X.enable(); gear = 10;  X.move(HalfShift); shiftdirection =3;  OldTime = millis();}
        
        if (digitalRead(NeutralButton) == LOW) {X.enable();
          X.move(HalfShift);
          if(NShiftCheck()){
            gear = 0; EEPROM.write(1, 0);Serial.print("gear = "); Serial.println(gear);
            }
          else {X.enable();X.move(-HalfShift);}
          } 
          
         break;
    
         
    case 2://Second
        if (digitalRead(up) == LOW) {X.enable(); gear = 13;  X.move(FullShift); shiftdirection =1;  OldTime = millis();
          break;
        }
        else if (digitalRead(down) == LOW) {X.enable(); gear = 11;  X.move(-FullShift); shiftdirection =2;  OldTime = millis();}
       
    
         if (digitalRead(NeutralButton) == LOW) {X.enable();
          X.move(-HalfShift);
          if(NShiftCheck()){
            gear = 0; EEPROM.write(1, 0);Serial.print("gear = "); Serial.println(gear);
            }
          else {X.enable();X.move(HalfShift); delay(200);}
          } 
         break;
    
         
    case 3://Third
        if (digitalRead(up) == LOW) {X.enable(); gear = 14;  X.move(FullShift); shiftdirection =1;  OldTime = millis();
          break;
        }
        else if (digitalRead(down) == LOW) {X.enable();  gear = 12;  X.move(-FullShift); shiftdirection =2;  OldTime = millis();}
        
       
          if (digitalRead(NeutralButton) == LOW) {X.enable();
          X.move(-HalfShift - FullShift);
          if(NShiftCheck()){
            gear = 0; EEPROM.write(1, 0);Serial.print("gear = "); Serial.println(gear);
            }
          else {X.enable();X.move(+HalfShift + FullShift);delay(200);}
          }     break;
    
         
    case 4://Fourth
        if (digitalRead(up) == LOW) {X.enable();  gear = 15;  X.move(FullShift); shiftdirection =1;  OldTime = millis(); 
           break;
        }
        else if (digitalRead(down) == LOW) {X.enable(); gear = 13;  X.move(-FullShift); shiftdirection =2;  OldTime = millis();}
        
      if (digitalRead(NeutralButton) == LOW) {X.enable();
          X.move(-HalfShift - 2*FullShift);
          if(NShiftCheck()){
            gear = 0; EEPROM.write(1, 0);Serial.print("gear = "); Serial.println(gear);
            }
          else {X.enable();X.move(+HalfShift + 2* FullShift);delay(200);}
          }     break;
    
         
    case 5://Fith
        if (digitalRead(up) == LOW) {X.enable();  gear = 16;  X.move(FullShift); shiftdirection =1;  OldTime = millis();
          break;
        }
        else if (digitalRead(down) == LOW) {X.enable();  gear = 14;  X.move(-FullShift); shiftdirection =2;  OldTime = millis();}
        
     if (digitalRead(NeutralButton) == LOW) {X.enable();
          X.move(-HalfShift - 3*FullShift);
          if(NShiftCheck()){
            gear = 0; EEPROM.write(1, 0);Serial.print("gear = "); Serial.println(gear);
            }
          else {X.enable(); X.move(+HalfShift + 3*FullShift);delay(200);}
          }        break;
    
         
    case 6://sixth
        if (digitalRead(down) == LOW) {X.enable();  gear = 15;  X.move(-FullShift); shiftdirection =2;  OldTime = millis();}
        
     if (digitalRead(NeutralButton) == LOW) {X.enable();
          X.move(-HalfShift - 4*FullShift);
          if(NShiftCheck()){
            gear = 0; EEPROM.write(1, 0);Serial.print("gear = "); Serial.println(gear);
            }
          else {X.enable();X.move(+HalfShift + 4*FullShift);delay(200);}
          }       break;

   //Transition States - Saves gear change to memory, call ShiftCheck().
     case 10:
       ShiftCheck(); if (shiftdirection == 0){break;} //If a failed shift happened, break before saving new gear to memmory (this may never be called but it feels safe, FSM scare me)
       gear = 0; EEPROM.write(1, 0);Serial.print("gear = "); Serial.println(gear);
       break;
     case 11:
       ShiftCheck(); if (shiftdirection == 0){break;}
       gear = 1; EEPROM.write(1, 1);Serial.print("gear = "); Serial.println(gear);
       break;
     case 12:
       ShiftCheck(); if (shiftdirection == 0){break;}    
       gear = 2; EEPROM.write(1, 2);Serial.print("gear = "); Serial.println(gear);
       break;
     case 13:
       ShiftCheck(); if (shiftdirection == 0){break;}    
       gear = 3; EEPROM.write(1, 3);Serial.print("gear = "); Serial.println(gear);
       break;
     case 14:
       ShiftCheck(); if (shiftdirection == 0){break;}    
       gear = 4; EEPROM.write(1, 4);Serial.print("gear = "); Serial.println(gear);
       break;
     case 15:
       ShiftCheck(); if (shiftdirection == 0){break;}    
       gear = 5; EEPROM.write(1, 5);Serial.print("gear = "); Serial.println(gear);
       break;
     case 16:
       ShiftCheck(); if (shiftdirection == 0){break;}    
       gear = 6; EEPROM.write(1, 6);Serial.print("gear = "); Serial.println(gear);
       break;
   }//endofgearmachine


//EMERGENCY HOME MODE
while(digitalRead(EmerencyHome)==LOW){
OldTime = millis();

//Set motor speed slow and initiate full rotation
X.enable();
X.setMaxVel(200); 
X.move(3600);
while ((millis()-OldTime)<=21000){
  //Check for jam
  if (X.readHLFB()){OldTime = OldTime+30000;Serial.println("JAM FOUND");}
  if (digitalRead(NeutralIndicator)==LOW){
        X.disable();
        Serial.println("NEUTRAL FOUND");
        delay(5000);
        gear = 0; EEPROM.write(1, 0); X.setMaxVel(95000); 
 }}
 OldTime = millis();
 X.disable();
 delay(100);
 X.enable();
 delay(100);
 X.move(-3600);
while ((millis()-OldTime)<=21000){
  if (X.readHLFB()){OldTime = OldTime+30000;Serial.println("JAM FOUND");}
  if (digitalRead(NeutralIndicator)==LOW){
        X.disable();
        Serial.println("NEUTRAL FOUND");
        delay(5000);  
        gear = 0; EEPROM.write(1, 0); X.setMaxVel(95000); 
 }}
 X.disable();
 delay(100);
 X.enable();
 delay(100);
 X.setMaxVel(95000); 
}
}//endofloop
